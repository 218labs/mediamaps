<?php

namespace Container4xAh3uV;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityManagerService extends App_KernelProdContainer
{
    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public static function do($container, $lazyLoad = true)
    {
        if ($lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = $container->createProxy('EntityManager_9a5be93', function () use ($container) {
                return \EntityManager_9a5be93::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = self::do($container, false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        $a = new \Doctrine\ORM\Configuration();

        $b = ($container->privates['doctrine.system_cache_pool'] ?? $container->load('getDoctrine_SystemCachePoolService'));
        $c = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();

        $d = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(($container->privates['annotations.cached_reader'] ?? $container->getAnnotations_CachedReaderService()), [0 => (\dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Entity'), 1 => (\dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'cron'.\DIRECTORY_SEPARATOR.'cron-bundle'.\DIRECTORY_SEPARATOR.'Entity')]);

        $c->addDriver($d, 'App\\Entity');
        $c->addDriver($d, 'Cron\\CronBundle\\Entity');

        $a->setEntityNamespaces(['App' => 'App\\Entity', 'CronCronBundle' => 'Cron\\CronBundle\\Entity']);
        $a->setMetadataCache($b);
        $a->setQueryCache($b);
        $a->setResultCache(($container->privates['doctrine.result_cache_pool'] ?? $container->load('getDoctrine_ResultCachePoolService')));
        $a->setMetadataDriverImpl(new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($c, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ])));
        $a->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $a->setProxyNamespace('Proxies');
        $a->setAutoGenerateProxyClasses(false);
        $a->setSchemaIgnoreClasses([]);
        $a->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true));
        $a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Repository\\CategoryRepository' => ['privates', 'App\\Repository\\CategoryRepository', 'getCategoryRepositoryService', true],
            'App\\Repository\\CompaignRepository' => ['privates', 'App\\Repository\\CompaignRepository', 'getCompaignRepositoryService', true],
            'App\\Repository\\CountryRepository' => ['privates', 'App\\Repository\\CountryRepository', 'getCountryRepositoryService', true],
            'App\\Repository\\GeographicalSystemRepository' => ['privates', 'App\\Repository\\GeographicalSystemRepository', 'getGeographicalSystemRepositoryService', true],
            'App\\Repository\\InterestRepository' => ['privates', 'App\\Repository\\InterestRepository', 'getInterestRepositoryService', true],
            'App\\Repository\\LanguageRepository' => ['privates', 'App\\Repository\\LanguageRepository', 'getLanguageRepositoryService', true],
            'App\\Repository\\LinkCaptureRepository' => ['privates', 'App\\Repository\\LinkCaptureRepository', 'getLinkCaptureRepositoryService', true],
            'App\\Repository\\LinkRepository' => ['privates', 'App\\Repository\\LinkRepository', 'getLinkRepositoryService', true],
            'App\\Repository\\LogRepository' => ['privates', 'App\\Repository\\LogRepository', 'getLogRepositoryService', true],
            'App\\Repository\\MailHistoryRepository' => ['privates', 'App\\Repository\\MailHistoryRepository', 'getMailHistoryRepositoryService', true],
            'App\\Repository\\MediaGeographicalSystemRepository' => ['privates', 'App\\Repository\\MediaGeographicalSystemRepository', 'getMediaGeographicalSystemRepositoryService', true],
            'App\\Repository\\MediaInterestRepository' => ['privates', 'App\\Repository\\MediaInterestRepository', 'getMediaInterestRepositoryService', true],
            'App\\Repository\\MediaLanguagesRepository' => ['privates', 'App\\Repository\\MediaLanguagesRepository', 'getMediaLanguagesRepositoryService', true],
            'App\\Repository\\MediaRepository' => ['privates', 'App\\Repository\\MediaRepository', 'getMediaRepositoryService', true],
            'App\\Repository\\MediaSocialNetworkRepository' => ['privates', 'App\\Repository\\MediaSocialNetworkRepository', 'getMediaSocialNetworkRepositoryService', true],
            'App\\Repository\\SettingRepository' => ['privates', 'App\\Repository\\SettingRepository', 'getSettingRepositoryService', true],
            'App\\Repository\\UserRepository' => ['privates', 'App\\Repository\\UserRepository', 'getUserRepositoryService', true],
        ], [
            'App\\Repository\\CategoryRepository' => '?',
            'App\\Repository\\CompaignRepository' => '?',
            'App\\Repository\\CountryRepository' => '?',
            'App\\Repository\\GeographicalSystemRepository' => '?',
            'App\\Repository\\InterestRepository' => '?',
            'App\\Repository\\LanguageRepository' => '?',
            'App\\Repository\\LinkCaptureRepository' => '?',
            'App\\Repository\\LinkRepository' => '?',
            'App\\Repository\\LogRepository' => '?',
            'App\\Repository\\MailHistoryRepository' => '?',
            'App\\Repository\\MediaGeographicalSystemRepository' => '?',
            'App\\Repository\\MediaInterestRepository' => '?',
            'App\\Repository\\MediaLanguagesRepository' => '?',
            'App\\Repository\\MediaRepository' => '?',
            'App\\Repository\\MediaSocialNetworkRepository' => '?',
            'App\\Repository\\SettingRepository' => '?',
            'App\\Repository\\UserRepository' => '?',
        ])));
        $a->addCustomStringFunction('CONCAT_WS', 'DoctrineExtensions\\Query\\Mysql\\ConcatWs');
        $a->addCustomStringFunction('DATE_ADD', 'DoctrineExtensions\\Query\\Mysql\\DateAdd');
        $a->addCustomStringFunction('DATE_FORMAT', 'DoctrineExtensions\\Query\\Mysql\\DateFormat');
        $a->addCustomStringFunction('DATE', 'DoctrineExtensions\\Query\\Mysql\\Date');
        $a->addCustomStringFunction('TIME', 'DoctrineExtensions\\Query\\Mysql\\Time');
        $a->addCustomStringFunction('HOUR', 'DoctrineExtensions\\Query\\Mysql\\Hour');
        $a->addCustomStringFunction('ROUND', 'DoctrineExtensions\\Query\\Mysql\\Round');
        $a->addCustomStringFunction('TIME_TO_SEC', 'DoctrineExtensions\\Query\\Mysql\\TimeToSec');
        $a->addCustomStringFunction('TIMEDIFF', 'DoctrineExtensions\\Query\\Mysql\\TimeDiff');
        $a->addCustomStringFunction('MONTH', 'DoctrineExtensions\\Query\\Mysql\\Month');
        $a->addCustomStringFunction('YEAR', 'DoctrineExtensions\\Query\\Mysql\\Year');
        $a->addCustomStringFunction('CONCAT', 'DoctrineExtensions\\Query\\Mysql\\Concat');

        $instance = \Doctrine\ORM\EntityManager::create(($container->services['doctrine.dbal.default_connection'] ?? $container->load('getDoctrine_Dbal_DefaultConnectionService')), $a);

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }
}
